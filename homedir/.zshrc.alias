# collection of zsh aliases


######################################################################
# docker alias

alias dockerrun='docker run --rm -it'
alias dockerrunpwd='dockerrun -v ${PWD}:${PWD} -w ${PWD}'
alias dockerrunuser='dockerrunpwd -v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u=$(id -u $USER):$(id -g $USER)'
alias dockeronce='docker run --rm -v ${PWD}:${PWD} -w ${PWD}'
# TODO yields error for 2 or more running container
alias dockerexeconly='docker exec -it $(docker ps -q) bash'
alias dockerrmi='docker rmi $(docker images -f "dangling=true" -q)'
alias dockerrm='docker rm $(docker ps -qf status=exited)'

export MY_DOCKER_GDB_OPTION="--cap-add=SYS_PTRACE --security-opt seccomp=unconfined"

function docker_cleanup()
{
  # Newly created files during during docker run can have different ownership.
  # Let's change owner of all files under current directory
  OWNER_UID=$(stat -c "%u" $PWD)
  OWNER_GID=$(stat -c "%g" $PWD)

  CMD="chown -R $OWNER_UID:$OWNER_GID $PWD"
  dockerrunpwd ubuntu $CMD
}


######################################################################
# git alias
# TODO Move git alias into git's alias, e.g. git hub / git clear

# OPTIONAL ARG
# - fallback branch name
get_main_branch_name()
{
  local remote_name=''

  if [ -z $remote_name ]; then
    remote_name=$(git remote | grep '^upstream$')
  fi

  if [ -z $remote_name ]; then
    remote_name=$(git remote | grep '^origin$')
  fi

  if [ ! -z $remote_name ]; then
    git remote show $remote_name | grep 'HEAD branch' | sed 's/HEAD branch://' | sed 's/ //g'
    return 0
  fi

  if [ $# -ge 1 ]; then
    # TODO check this branch name actually exists
    echo $1; shift
    return 0
  fi

  return 1
}

get_curr_branch_name()
{
  git rev-parse --abbrev-ref HEAD 2> /dev/null
}

alias gitlogb="git log --oneline --graph --branches='*'"
alias gitlog='git log --pretty=format:"%h%x09%ad%x09%an%x09%s"'

gitpush()
{
  # Based on `git-aware-prompt/prompt.sh`
  branch=$(get_curr_branch_name)
  git push -u origin $branch
}

# sort branch by commit date
gitbranch()
{
  git for-each-ref \
    --sort=committerdate \
    refs/heads/ \
    --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
}

# clear all
# TODO make it safer
alias gitclear='git checkout -- . && git clean -df'

# Remove current branch
#
# OPTIONAL ARG
# - fallback branch name
gitrmb()
{
  local curr_branch=$(get_curr_branch_name)
  local main_branch=$(get_main_branch_name $1)

  if [ $curr_branch = $main_branch ]; then
    echo "Cannot remove main branch '$main_branch'"
    return
  fi

  gitclear
  git checkout $main_branch
  git branch -D $curr_branch
}

# Update main and rebase current branch to it
#
# OPTIONAL ARG
# - fallback branch name
gitrebase()
{
  local curr_branch=$(get_curr_branch_name)
  local main_branch=$(get_main_branch_name $1)

  if [ $curr_branch = $main_branch ]; then
    echo "Cannot rebase main branch '$main_branch'"
    return
  fi

  git checkout $main_branch
  git pull
  git checkout $curr_branch
  git rebase $main_branch
}

gitresetbase()
{
  local base_branch=$1

  if [ -z ${base_branch} ]; then
    base_branch=master
  fi

  echo "Reset to merge base with branch: '${base_branch}'"

  git reset $(git merge-base $(git rev-parse HEAD) $(git rev-parse ${base_branch}))
}

# git commit --amend --no-edit
# TODO Check if HEAD commit is 'official' e.g. one on master
gitcommitamend()
{
  # TODO Do not commit if commit message have signed-off msg
  git commit --amend --no-edit $@
}

gitextract()
{
  local branch=$1; shift

  git checkout -b $branch

  if [ "$?" -ne 0 ]; then
    return 1
  fi

  git reset HEAD^
}

githash()
{
  local HASH=$(git rev-parse --short HEAD | tr -d '\n')
  echo $HASH
  echo -n $HASH | xclip -sel clip
}

alias gitrv=gitreview
gitreview()
{
  local branch=$1
  if [[ -z ${branch} ]]; then
    echo "ERROR! Branch name is not provided."
    return 1
  fi

  local proper_branch=${branch}
  proper_branch=$(echo ${proper_branch} | tr ":" "/")
  proper_branch=$(echo ${proper_branch} | sed s/ch-bahk/origin/g)
  proper_branch=$(echo ${proper_branch} | sed s/cgbahk/origin/g)

  local git_user_name=$(echo ${proper_branch} | cut -d'/' -f1)

  echo
  echo "Checking out for review..."
  echo

  if [[ -z $(git remote | grep ${git_user_name}) ]]; then
    echo "ERROR! Git user's fork is not on local."
    return 1
  fi

  git pull && git fetch ${git_user_name}
  git checkout --track ${proper_branch}
  git reset $(git merge-base $(git rev-parse ${proper_branch}) $(git rev-parse master))
}

alias gitcommitdraft='git commit -m "WIP (not HEAD) [ci skip]"'

alias gitfzf="git branch --format='%(refname:short)' | fzf"
alias gitcofzf='git checkout $(gitfzf)'

# OPTIONAL ARG
# - fallback branch name
gitdifftobase()
{
  local base_branch=$(get_main_branch_name $1)
  local merge_base=$(git merge-base $(git rev-parse HEAD) $(git rev-parse ${base_branch}))

  git diff ${merge_base}..HEAD
}

issue()
{
  local url=$1
  local issue_no="${url##*/}"
  hub issue update --edit $issue_no
}


######################################################################
# grep & find
mgrep()
{
  # TODO exclude .gitignore list
  # This does not work as intended
  exclude_option=(--exclude-dir={.git,./build})
  if [ $# == 1 ]; then
    search_dir=.
  else
    if [ ! -d "$1" ]; then
      echo "$1 is not directory!"
      return
    fi
    search_dir=$1
    shift
  fi
  grep -rn ${exclude_option[@]} $search_dir -ie $1
}
# TODO Change mfind similar to mgrep. This is rather complicated than mgrep
alias mfind='find . -name'

# apt
alias mapt='apt update && apt install -y'

# at alias: it wraps command at specific directory and turn back
at()
{
  pushd $1 >> /dev/null
  shift
  # TODO This is work-around. Found better solution
  ftemp="$HOME/.at_alias_temp"
  echo $* > ${ftemp}
  source ${ftemp}
  rm ${ftemp}
  popd >> /dev/null
}

# custom alias by project
mmake()
{
  if [ -f .idea/Makefile ]; then
    make -f .idea/Makefile $@
  elif [ -f .vscode/Makefile ]; then
    make -f .vscode/Makefile $@
  else
    echo "No matching local makefile"
  fi
}


######################################################################
# Simple web server deploy

deploy-httpd()
{
docker run -d --rm \
  -p $1:80 \
  -v $2:/usr/local/apache2/htdocs/ \
  --name $3 \
  httpd
}


######################################################################
# vim command line

alias vimyaml="vim -c 'se syntax=yaml' -c 'se foldmethod=indent'"
vimchanged()
{
  # TODO Cannot deal with path with whitespace
  local gitroot=$(git rev-parse --show-toplevel)
  vim -p1 $(git status --porcelain | sed s%^...%${gitroot}/%)
}

vimcommit()
{
  vim -c "let g:gitgutter_diff_base='HEAD^'" -p1 $(git log --name-only --format="" -1)
}

vimprev()
{
  prev=$(history | tail -2 | head -1 | cut -c8-999)
  eval $prev | vim $@ -
}

vimrebase()
{
  vim -p1 $(git status -s | grep -E "UU|AA" | awk '{print $2}')
}

vimg()
{
  vim -c "vert G"
}

# OPTIONAL ARG
# - fallback branch name
vimtobase()
{
  local base_branch=$(get_main_branch_name $1)
  local merge_base=$(git merge-base $(git rev-parse HEAD) $(git rev-parse ${base_branch}))

  # TODO Remove duplication
  git log --name-only --format="" ${merge_base}..HEAD | sort | uniq

  # TODO Getting changed file may not gives current commit's path
  vim -c "let g:gitgutter_diff_base='${merge_base}'" -p1 $(git log --name-only --format="" ${merge_base}..HEAD | sort | uniq)
}


######################################################################
# Github CLI

ghissue ()
{
  gh issue view --web $1 > /dev/null 2>&1
}

ghrefer()
{
  # TODO Support PR review
  COMMENT_URL_ORIG=$1; shift

  # Normalize comment URL
  COMMENT_URL=$(echo ${COMMENT_URL_ORIG} | sed 's /files# #discussion_ ')

  OWNER=$(\
    echo ${COMMENT_URL} \
    | sed 's|https://||' \
    | awk -F "/" '{print $2}' \
  )
  REPO=$(\
    echo ${COMMENT_URL} \
    | sed 's|https://||' \
    | awk -F "/" '{print $3}' \
  )
  KIND=issues
  COMMENT_ID=$(\
    echo ${COMMENT_URL} \
    | sed 's/.*#//' \
    | sed 's/[^0-9]//g' \
  )

  API=repos/${OWNER}/${REPO}/${KIND}/comments/${COMMENT_ID}

  AUTHOR=$(gh api ${API} | jq -r '.user.login')

  # Write down
  CONTENTS=$(mktemp)
  gh api ${API} | jq -r '.body' | sed 's/.*/> &/' >> ${CONTENTS}
  echo '>' >> ${CONTENTS}
  echo "> _(Copied from ${COMMENT_URL}, origially written by @${AUTHOR})_" >> ${CONTENTS}

  cat ${CONTENTS}
  cat ${CONTENTS} | xclip -sel clip
}


######################################################################
# etc.

stderred()
{
  $@ 2> >(while read line; do echo -e "\e[01;31m$line\e[0m" >&2; done)
}

cdtemp()
{
  local KEYWORD=$1
  if [ -z ${KEYWORD} ]; then
    KEYWORD='default'
  fi

local OS_NAME=$(uname 2> /dev/null)
case ${OS_NAME} in
  Linux)
    cd $(mktemp -d --tmpdir ${KEYWORD}.XXX) && pwd | xclip -sel clip
    ;;
  Darwin)
    # `printf` is to trim whitespaces around `pwd`
    cd $(mktemp -d -t ${KEYWORD}) && printf "%s" "$(pwd)" | pbcopy
    ;;
  *)
    echo "ERROR: Unknown os: ${OS_NAME}"
    return 1
esac
}

make_venv()
{
  local PYTHON_EXE=$1; shift
  local VENV_PATH=$1; shift

  if ! type "$PYTHON_EXE" > /dev/null; then
    echo "ERROR: No command '${PYTHON_EXE}'"
    return 1
  fi

  ${PYTHON_EXE} -m venv ${VENV_PATH}
  ${VENV_PATH}/bin/python -m pip install -U pip

  source ${VENV_PATH}/bin/activate
}

prepare_python_directory()
{
  local main_script_path="main.py"

  if [ -e ${main_script_path} ]; then
    echo "${main_script_path} already exists"
  else
cat << EOF > ${main_script_path}
def main():
    pass


if __name__ == "__main__":
    main()
EOF
    echo "${main_script_path} generated"
  fi

  local require_list_path="requirements.txt"

  if [ -e ${require_list_path} ]; then
    echo "${require_list_path} already exists"
  else
    touch ${require_list_path}
    echo "${require_list_path} generated"
  fi
}

report_path()
{
  echo $PATH | awk -F ':' 'BEGIN { OFS="\n"}; {$1=$1; print $0}'
}
